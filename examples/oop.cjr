// OOP in CJR is very simple, and not enforced, you can write an entire project without it.
// There are no instances of objects, there are simply namespaces. There is no "new" keyword.

// Create a namespace called example_namespace
namespace example_namespace {
    var variable: string = "OOP"

    // Create a nested namespace called nested_namespace
    namespace nested_namespace {
        // Put a function in the nested_namespace namespace which is in the example_namespace namespace
        func hello(): void {
            printf("Hello, %s!\n", example_namespace::variable)
        }
        
        // Create an even deeper nested namespace
        namespace nested_deeper {
            func hey(): void {
                printf("Hey, %s!\n", example_namespace::variable)
            }
        }

        // Create "modified version" of nested_deeper::hey that modifies the value it references before calling it.
        func hey(): void {
            example_namespace::variable = "modified"
            example_namespace::nested_namespace::nested_deeper::hey()
        }
    }
}

func main(): void {
    example_namespace::nested_namespace::hello()
    example_namespace::nested_namespace::nested_deeper::hey()
    example_namespace::nested_namespace::hey()
}